/**
 * \file doxygen.java
 * \brief Dummy file to hold the main documentation page.
 */

/**
 * \defgroup components Components
 * \brief The components of opensearch
 * \defgroup common Common
 * \brief All classes that are shared between the components
 * 
 * \defgroup datadock DataDock
 * \ingroup components 
 * \brief The datadock receives incoming data and stores it in the repository.
 * \defgroup pti PTI
 * \ingroup components 
 * \brief The PTI component processes, possibly annotates and/or transforms and indexes the data scheduled by the DataDock
 *
 */

/**
 * \mainpage 
 * \section Overview 
 * The Opensearch project has 3 different main responsibilities: 
 * - Receiving, identifying and storing data, indexing data and
     finally facilitating access to data through direct reference or
     as a result of queries.
 * 
 *  - Recieving, identifying and storing data
 *    This is the responsibility of the DataDock component.  The first
 *    task of this component is to receive data, identify it and
 *    validate the attached metadata for later processing.
 *
 *    After validation, the recieved data is stored in an internal
 *    format (a CargoContainer) with identification markers.  Second,
 *    the component must store the data in the fedora repository, alert
 *    the pti component of the new task, and lastly return an estimate
 *    of the time before the data object is effectively searchable.
 *    \see DataDock  
 * - Indexing data.
 *
 *   This is done in the PTI component. 
 *   When alerted of a new data object to index, this component retrieves a copy 
 *   of the data from the repository and prepares it for indexing. Through the
 *   Compass framework the data gets indexed and saved in the database. When this process is finished, the 
 *   estimate table in the database gets updated.
 *   \see PTI  
 *
 * - Facilitate access to stored data
 *
 *   To be implemented in 0.8
 *
 * \section Components
 *
 * \subsection DataDock
 * The DataDock consists of a plugin system, that takes care of the following tasks:
 * - Receive data.
 *   This part is somewhat hardcoded and currently only supports
 *   reading files from disk (through the FileHarvester).  Data is
 *   read from files in a directory given in the DataDock
 *   configuration. The information needed for indexing - which is
 *   mimetype, language, submitter and format - is also given qua the
 *   path of the files. These arguments are validated, and a
 *   CargoObject with the data and meta data is constructed for each
 *   data subject in the source.
 * \see DataDockPoolAdmMain, DataDockPoolAdm, DataDockPool, CargoContainer 
 * - Store data in repository.

 *   When a CargoContainer is constructed the DataDockPool spawns a DataDock thread.
 *   The DataDock thread stores the data in the repository through the Fedora API classes.
 *   \see DataDockPool, DataDock, FedoraAdministration, FedoraTools

 * - Alert the PTI Component of a new data object

 *   After the data is stored, a repository pointer is pushed onto the Processqueue,
 *   which will be polled by the PTI component.
 *   \see DataDock, Processqueue

 * - Return an Estimate of the time before the data object is searchable.\n

 *   Reads an average process time for data with this mimetype from the statisticDB 
 *   table in the database, and returns a suitable estimate for how long time remains 
 *   before the data object is searchable by the Lantern component to the submitter.
 *   Currently the estimate is printed to the log
 *   \see DataDock, Estimate
 *
 * \subsection pti PTI (Processing, Transformation, BLABLA)

 * The PTI Component is - like the DataDock - a plugin system. It runs
 * as a daemon service that polls the Processqueue for new repository
 * pointers. The service handles the following tasks:

 * - Polling Processqueue and start processing/indexing.

 *   The PTIPoolAdm class polls the Processqueue, and when a new data entry is made 
 *   by the DataDock, it starts a new PTI thread through the PTIPool.
 *   \see PTIPoolAdmMain, PTIPoolAdm, PTIPool, Processqueue

 * - Process and transform data for indexing.
 *   This only works for faktalink xml at the moment. The Indexing is done with a 
 *   Compass instance, And the indexes in the faktalink instance re generated by using
 *   Compass XSEM mapping feature. Later other format can be index using XSEM or  the 
 *   mapping models provided by Compass. 

 *   \see PTIPool, PTI, Compass

 * - Indexing and Storing of data.
 *   The Indexing and storing of the indexes is done through a CompassSession. It stores 
 *   the indexes in an oracle database.

 *   \see PTI, Compass

 * - Update Estimate for this mimetype.
 *   After the indexes are stored in the database the data object is searchable. The 
 *   PTI thread exits, and return the actual processtime for this data object. The average 
 *   process-time is calculated and the StatisticDB table in the database is updated with 
 *   the new information. 

 *   \see PTI, Estimate
 *
 * \subsection Lantern

 * Functionality of this module is not yet implemented, a prototype of the funtionality is available through Solr.
 *
 * \section Common
 * Here follows a description of the tools used to facilitate the components.
 *
 * \subsection FedoraCommunication

 * - Storing and retrieving data.

 *   When used to store data, the FedoraCommunication simply iterates
 *   the CargoObjects of the CargoContainer and constructs a Fedora
 *   DigitalObject that - roughly - corresponds to the
 *   CargoContainer. The idea being that the CargoContainer can be
 *   replicated in the exact same state from the DigitalObject.

 * \see FedoraCommunication
 *
 * \subsection Processqueue

 * The Processqueue is used to register not yet indexed data
 * objects. The class handles all communication to the Processqueue
 * table in a DBMS. When the DataDock has stored the data in the
 * repository, a pointer to the data is pushed to the queue. This
 * enables the PTI component to poll the Processqueue and, when a new
 * data-element is present, to pop it from the queue. After the PTI
 * has ended indexing the pop will committed to the queue, thereby
 * ensuring atomicity of the transactions made throughout the system.
 * If something goes wrong in the indexing process, a rollback of the
 * pop is possible. \see Processqueue
 *
 * \subsection Estimate
 * The Estimate class handles all communication with the StatisticDB
 * table in the database, and is used to return an estimate of the
 * time before the data is searchable.  It provides methods for
 * retrieving and updating estimates for the processing time of
 * mimetypes.  \see Estimate
 * 
 * \section Executables
 * 
 * \subsection DataDock

 *   starts The DataDock.

 *   example of usage:

 *   java -jar DataDock.jar

 * \subsection PTIPoolAdmMain

 *   starts the PTI.

 *   example of usage:

 *   java -jar PTI.jar
 *
 * \section Configuration
 * The configuration files are located in the 'config' directory.
 * It contains the following files:
 * \subsection Compass
     compass.cfg.xml

 * \subsection Opensearch
     config.txt

     A general configuration file for all the components
 * \subsection Logging
     log4j.xml

     Configuration of the logging framework.
 * \subsection XSEM
     xml.cpm.xlm

     Contains the XSEM mappings for known formats; the indexing rules.
 * \section Administration

 */
