<?xml version="1.0" encoding="UTF-8"?>
<project name="build-common" >
  <import file="dependencies.xml"/>

  <property name="base.dir"         value="${dependencies.basedir}"/>

  <property name="lib.dir"          value="${base.dir}/lib"/>
  <property name="src.dir"          value="${base.dir}/src"/>
  <property name="build.dir"        value="${base.dir}/build"/>
  <property name="dist.dir"         value="${base.dir}/dist"/>
  <property name="classes.dir"      value="${build.dir}/classes"/>
  <!-- please note that the "docs" value is hardcoded in the Doxyfile -->
  <property name="doc.dir"          value="${base.dir}/docs"/>
  <property name="api.dir"          value="${doc.dir}/api"/>
  <property name="opensearch.dir"   value="${src.dir}/dbc/opensearch"/>
  <property name="components.dir"   value="${opensearch.dir}/components"/>
  <property name="datadock.dir"     value="${components.dir}/datadock"/>
  <property name="config.dir"       value="${base.dir}/config"/>
  <property name="xsd.dir"          value="${src.dir}/xsd"/>
  <property name="instrumented.dir" value="${build.dir}/instrumented-classes"/>
  <property name="report.dir"       value="${doc.dir}/coverage-report"/>

  <path id="classpath">
    <fileset dir="${lib.dir}" includes="*.jar" excludes="ant*.jar"/>
    <pathelement location="${classes.dir}" />
    <pathelement location="${config.dir}" />
  </path>

  <!-- libraries used internally by ant is named ant_*.jar -->
  <path id="antlibpath">
    <fileset dir="${lib.dir}" includes="ant_*.jar"/>
  </path>

  <!-- just for debugging purposes, putting the classpath into a property-->
  <pathconvert targetos="unix" property="cp" refid="classpath">
    <map from="${classpath}" to="${cp}"/>
  </pathconvert>
  <pathconvert targetos="unix" property="alp" refid="antlibpath">
    <map from="${antlibpath}}" to="${alp}"/>
  </pathconvert>
  <!-- end debugging section -->

  <!-- ===================================================================== -->
  <!-- TARGETS -->
  <!-- ===================================================================== -->

  <target name="clean" description="Deletes files created during the build">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete dir="${api.dir}"/>
    <delete dir="${report.dir}"/>
    <delete file="${base.dir}/doxygen-warnings"/>
  </target>

  <target name="clean-xsd" description="Deletes generated xsd classes">
    <delete dir="${opensearch.dir}/xsd"/>
  </target>

  <target name="compile" description="Compiles source code" depends="clean, xsd-classes">
    <mkdir dir="${classes.dir}"/>
    <echo>
      Building from ${basedir},
      building project ${ant.project.name},
      using ${cp},
      and putting it all into ${classes.dir}
    </echo>
    <javac srcdir="${basedir}" destdir="${classes.dir}" excludes="**/tests/*" debug="on">
      <classpath refid="classpath"/>
      <!-- <compilerarg value="-Xlint"/> -->
    </javac>
  </target>

  <target name="compile-tests" description="builds the tests for the component" depends="compile">
    <javac srcdir="${basedir}" destdir="${classes.dir}" includes="**/tests/*" debug="on">
      <classpath refid="classpath"/>
    </javac>
  </target>

  <target name="test" description="Run unittests" depends="compile-tests">
    <junit fork="yes"
           forkmode="once"
           printsummary="no"
           haltonerror="false"
           haltonfailure="false">

<!--       <classpath location="${instrumented.dir}" /> -->
      <classpath location="${classes.dir}" />
<!--       <classpath refid="cobertura.classpath" /> -->

      <formatter type="plain" usefile="no"/>
      <classpath refid="classpath"/>

      <batchtest fork="yes">
        <fileset dir="${src.dir}" includes="**/tests/*Test.java"/>
      </batchtest>
    </junit>
  </target>

  <target name="test-single" description="Run a single unittest using\nant -Dtest='dbc.opensearch.tools.tests.MyTest' test-single">
      <junit fork="yes"
             forkmode="once"
             printsummary="no"
             haltonerror="false"
             haltonfailure="false">

        <classpath location="${classes.dir}" />

        <formatter type="plain" usefile="no"/>
        <classpath refid="classpath"/>
        <test name="${test}"/>
      </junit>
  </target>

  <target name="doc" description="generates documentation for ${src.dir}">
    <taskdef
        name="doxygen"
        classname="org.doxygen.tools.DoxygenTask"
        classpath="${alp}" />

    <doxygen configFilename="${base.dir}/Doxyfile" />
  </target>

  <target name="xsd-classes" 
          description="Generate Java source files from the Schemas found in ${xsd.dir}."
          depends="clean-xsd">

    <taskdef name="castor-srcgen"
             classname="org.castor.anttask.CastorCodeGenTask"
             classpathref="classpath" />

    <castor-srcgen todir="${src.dir}/"
                   package="dbc.opensearch.xsd"
                   types="j2"
                   warnings="true" >
      <fileset dir="${xsd.dir}">
        <include name="*.xsd"/>
      </fileset>
    </castor-srcgen>

  </target>

  <target name="test-target">
    <echo>
      ant classpath=${cp}
      Basedir=${base.dir}
      lib.dir=${lib.dir}
      ant libs=${alp}
    </echo>
  </target>

  <!-- Cobertura code coverage tool -->

  <!-- Setting up the path -->
  <property name="cobertura.dir" value="${lib.dir}"/>
  <path id="cobertura.classpath">
    <fileset dir="${cobertura.dir}">
      <include name="cobertura.jar" />
      <include name="*.jar" />
    </fileset>
  </path> 
  <taskdef classpathref="cobertura.classpath" resource="tasks.properties" /> 
  
  <!--   The instrument target - building instrumented code -->
  <target name="coverage-instrument" depends="compile-tests">
    
    <!-- Capture the path as a delimited property using the refid attribute -->
    <property name="myclasspath" refid="classpath"/>
 
    <!-- Remove the coverage data file and any old instrumentation. -->
    <delete dir="${instrumented.dir}" />

    <cobertura-instrument todir="${instrumented.dir}" datafile="${instrumented.dir}/cobertura.ser">
      <!--
          The following line causes instrument to ignore any
          source line containing a reference to log4j, for the
          purposes of coverage reporting.
      -->
      <ignore regex="org.apache.log4j.*" />

      <fileset dir="${classes.dir}">
        <!--
            Instrument all the application classes, but
            don't instrument the test classes.
        -->
        <include name="**/*.class" />
        <exclude name="**/*Test.class" />
      </fileset>
    </cobertura-instrument>
  </target>

  <!-- Cobertura - this is not working yet-->

<!--   <target name="coverage-check"> -->
<!--     <cobertura-check branchrate="34" totallinerate="100" /> -->
<!--   </target> -->

  <target name="coverage-test" depends="coverage-instrument">
    <mkdir dir="${report.dir}" />
    
    <junit fork="yes"
           forkmode="once"
           printsummary="no"
           haltonerror="false"
           haltonfailure="false"
           dir="${instrumented.dir}"
           >
      <!-- Setting up the classpath -->
      <classpath location="${instrumented.dir}" /> 
      <classpath location="${classes.dir}" />
      <classpath refid="cobertura.classpath" />
      
      <!-- Performing the test -->
      <batchtest fork="yes">
        <fileset dir="${src.dir}" includes="**/tests/*Test.java"/>
      </batchtest>
    </junit>    
  </target>

  
  <target name="coverage-report-html" depends="coverage-test">
    <cobertura-report destdir="${report.dir}/html" datafile="${instrumented.dir}/cobertura.ser">
      <fileset dir="${src.dir}">
        <include name="**/*.java"/>
      </fileset>
    </cobertura-report>
  </target>
  
  <target name="coverage-report-xml" depends="coverage-test">
    <cobertura-report format="xml" destdir="${report.dir}/xml" datafile="${instrumented.dir}/cobertura.ser">
      <fileset dir="${src.dir}">
        <include name="**/*.java"/>
      </fileset>
    </cobertura-report>
  </target>
  
  <target name="coverage-check" depends="coverage-test">
    <cobertura-check branchrate="34" linerate="100" totallinerate="100" datafile="${instrumented.dir}/cobertura.ser" >
      <!--  Vi skal have fundet nogle fornuftige vÃ¦rdier her   -->
      <!--       <regex pattern="com.example.reallyimportant.*" branchrate="80" linerate="90"/> -->
      <!--       <regex pattern="com.example.boringcode.*" branchrate="40" linerate="30"/> -->
    </cobertura-check>   
  </target>

  <target name="coverage-reports" depends="coverage-test, coverage-report-html, coverage-report-xml" />

  <!-- ===================================================================== -->
  <!-- Experimental targets -->
  <!-- ===================================================================== -->


  <target name="update" description="updates the sources to HEAD">
    <typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpath="${alp}" />

    <svn javahl="false">
      <wcVersion path="${base.dir}"/>
      <update dir="${base.dir}"/>
    </svn>
    <echo message="${base.dir} updated to ${revision.max}"/>
  </target>

</project>
