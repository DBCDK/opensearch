<?xml version="1.0" encoding="UTF-8" ?>

<!--
This file is part of opensearch.
Copyright Â© 2009, Dansk Bibliotekscenter a/s,
Tempovej 7-11, DK-2750 Ballerup, Denmark. CVR: 15149043

opensearch is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

opensearch is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with opensearch.  If not, see <http://www.gnu.org/licenses/>.
-->


<project name="build" default="_compile">

  <tstamp/>
  <property name="now"              value="${DSTAMP}-${TSTAMP}" />

  <!-- directory definitions -->
  <property name="base.dir"         value="${basedir}" />

  <property name="admin.dir"        value="${base.dir}/admin"/>
  <property name="doc.dir"          value="${base.dir}/docs"/>
  <property name="api.dir"          value="${doc.dir}/javadoc"/> 
  <property name="bin.dir"          value="${base.dir}/bin"/>
  <property name="build.dir"        value="${base.dir}/build"/>
  <property name="classes.dir"      value="${build.dir}/classes"/>
  <property name="config.dir"       value="${base.dir}/config" />
  <property name="dist.dir"         value="${base.dir}/dist"/>
  <property name="info.dir"         value="${src.dir}/info" />
  <property name="lib.dir"          value="${base.dir}/lib"/>  
  <property name="tests.dir"        value="${base.dir}/tests" />
  <property name="unittests.dir"    value="${tests.dir}/unittests" />
  <property name="tmp.dir"          value="${base.dir}/tmp"/>  
  <property name="report.dir"       value="${doc.dir}/coverage-report"/>
  <property name="src.dir"          value="${base.dir}/src"/>
  <property name="opensearch.dir"   value="${src.dir}/dk/dbc/opensearch"/>
  <property name="testresults.dir"  value="${base.dir}/test-results"/>
  <property name="log.dir"          value="${bin.dir}/log-files"/>
  <property name="instrumented.dir" value="${build.dir}/instrumented-classes"/>
 

  <!-- CLASSPATH STUFF -->
  <path id="classpath">
    <fileset dir="${lib.dir}" includes="*.jar" excludes="ant.jar"/>
    <pathelement location="${classes.dir}" />
    <pathelement location="${config.dir}" />
  </path>

  <path id="classpath4jar">
    <fileset dir="${lib.dir}" includes="*.jar" excludes="ant.jar"/>
  </path>

  <!-- libraries used internally by ant is named ant_*.jar -->
  <path id="antlibpath">
    <fileset dir="${lib.dir}" includes="ant_*.jar"/>
  </path>

  <!-- just for debugging purposes, putting the classpath into a property-->
  <pathconvert targetos="unix" property="cp" refid="classpath">
    <map from="${classpath}" to="${cp}"/>
  </pathconvert>

  <pathconvert targetos="unix" property="alp" refid="antlibpath">
    <map from="${antlibpath}}" to="${alp}"/>
  </pathconvert>

  <!-- Enable use of tasks such as <var>, <if><then><else>..., etc.
      Ref. http://ant-contrib.sourceforge.net/tasks/tasks/index.html     -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="lib/ant-contrib.jar"/>
    </classpath>
  </taskdef>


  <!-- MACRODEFS -->
  <macrodef name="opensearch_dist" description="macro used for building jar files">
    <attribute name="Built-By" default="DBC" 
               description="The Built-By attribute for the manifest-file"/>
    <attribute name="Implementation-Vendor" default="DBC A/S" 
               description="Implementation-Vendor attribute for the manifest-file"/>
    <attribute name="Implementation-Title" default="${ant.project.name}"
               description="Implementation-Title attribute for the manifest-file"/>
    <attribute name="Implementation-Version" default="${version}"
               description="Implementation-Version attribute for the manifest-file"/>
    <attribute name="Class-Path" default="../lib/${jar_classpath} ../config/ " 
               description="Class-Path attribute for the manifest-file"/>
    <attribute name="Main-Class" 
               description="Main-Class attribute for the manifest-file. No default value, remember to specify"/>
    <attribute name="dist.name"  
               description="name postfix for the jar file. jart filename build like this: Opensearch-${dist-name}.jar"/>
    <sequential>
      <echo>
        Building jar file for @{dist.name}
      </echo>
      <!-- Create the distribution directory -->
      <mkdir dir="${dist.dir}"/>
      <mkdir dir="${log.dir}"/>
      <pathconvert property="jar_classpath" pathsep=" ../lib/">
        <path refid="classpath4jar" />
        <flattenmapper />
      </pathconvert>
      <jar destfile="${dist.dir}/${ant.project.name}_@{dist.name}.jar"
           basedir="${classes.dir}">
        <manifest>
          <attribute name="Built-By" value="@{Built-By}"/>
          <attribute name="Implementation-Vendor" value="@{Implementation-Vendor}"/>
          <attribute name="Implementation-Title" value="@{Implementation-Title}"/>
          <attribute name="Implementation-Version" value="@{Implementation-Version}"/>
          <attribute name="Class-Path" value="@{Class-Path}"/>
          <attribute name="Main-Class" value="@{Main-Class}" />
        </manifest>
      </jar>
    </sequential>
  </macrodef>


  <!-- TARGETS -->
  <target name="_clean" description="Deletes files created during the build">
    <delete file="${base.dir}/doxygen-warnings"/>
    <delete file="${base.dir}/datadock.log"/>
    <delete file="${config.dir}/config.xml"/>

    <delete dir="${api.dir}"/>
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete dir="${report.dir}"/>    
    <delete dir="${src.dir}/info"/>
    <delete dir="${testresults.dir}"/>
    <delete dir="${base.dir}/plugins" />
    <exec dir="${base.dir}/tools" executable="/usr/bin/python" os="Linux">
      <arg line="create_test_suite_files.py clean"/>
    </exec>    
  </target>


  <target name="_compile" description="Target used for all compilation">
    <mkdir dir="${classes.dir}"/>
    <echo>
      Building from '${src.dir}',
      building project '${ant.project.name}',
      and putting it all into '${classes.dir}'
    </echo>
    <javac srcdir="${src.dir}" destdir="${classes.dir}" excludes="**/tests/* Harvest/**" 
	   debug="on" includeantruntime="false">
      <classpath refid="classpath"/>
    </javac>
  </target>


  <target name="_compile-with-warnings" description="Target used for all compilation">
    <mkdir dir="${classes.dir}"/>
    <echo>
      Building from '${src.dir}',
      building project '${ant.project.name}',
      and putting it all into '${classes.dir}'
    </echo>
    <javac srcdir="${src.dir}" destdir="${classes.dir}" 
           excludes="**/tests/* Harvest/** testdir/**" debug="on"
	   includeantruntime="false">
      <classpath refid="classpath"/> 
      <compilerarg value="-Xlint"/>
    </javac>
  </target>


  <target name="_compile-tests" description="builds the tests for the component" >
    <echo>
      Building from '${tests.dir}',
      building project '${ant.project.name}',
      and putting it all into '${classes.dir}'
    </echo>
    <javac srcdir="${tests.dir}" destdir="${classes.dir}" debug="on" includeantruntime="false">
      <classpath refid="classpath"/>
    </javac>
  </target>
 

  <target name="_compile-tests_project" description="builds the tests for the component" >
    <echo>
      Building from '${src.dir}',
      building project '${ant.project.name}',
      and putting it all into '${classes.dir}'
    </echo>
    <javac srcdir="${src.dir}" destdir="${classes.dir}" debug="on" includeantruntime="false">
      <classpath refid="classpath"/>
    </javac>
  </target>

  <target name="_compile-javatools" description="builds javatools" >
    <javac srcdir="javatools/src" destdir="${classes.dir}" debug="on" includeantruntime="false">
      <classpath refid="classpath"/>
    </javac>
  </target>
  
  <target name="py_config">
    <exec dir="${base.dir}" executable="/usr/bin/python" os="Linux">
      <arg line="tools/build_config.py ${base.dir}"/>
    </exec>
  </target>


  <target name="_test" description="Run unittests" depends="py_config">
    <mkdir dir="${testresults.dir}"/>
    <junit fork="yes"
           forkmode="once"
           printsummary="withOutAndErr"
           haltonerror="false"
           haltonfailure="true">
      <jvmarg value="-javaagent:${lib.dir}/jmockit-0.996.jar" />
      
      <classpath location="${classes.dir}" />

      <formatter type="plain" usefile="no"/>
      <!-- uncomment the line below when this should be use with a cruisecontrol build server-->
      <formatter type="xml" usefile="yes"/>
      <classpath refid="classpath"/>

      <batchtest todir="${testresults.dir}">
        <fileset dir="${classes.dir}" >
          <include name="**/*Test.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>


  <target name="_test-single"
          description="Run a single unittest using\nant -Dtest='dk.dbc.opensearch.common.fedora.MyTest' test-single" 
          depends="py_config">
    <junit fork="yes"
           forkmode="once"
           printsummary="on"
           haltonerror="false"
           haltonfailure="false">
      <jvmarg value="-javaagent:${lib.dir}/jmockit-0.996.jar" />
      <classpath location="${classes.dir}" />

      <formatter type="plain" usefile="no"/>
      <classpath refid="classpath"/>
      <test name="${test}"/>
    </junit>
  </target>


  <target name="_test_functionaltests" description="Run functionaltests" depends="py_config">
    <java classname="${classname}">      
      <classpath location="${classes.dir}" />
      <classpath refid="classpath" />
      <arg value="${mainarg}" />
    </java>
  </target>


  <target name="_doc" description="generates documentation for ${src.dir}">
    <javadoc access="package" author="true" classpathref="classpath" 
             destdir="${api.dir}" doctitle="OpenSearch" nodeprecated="false" 
             nodeprecatedlist="false" noindex="false" nonavbar="false" 
             notree="false" overview="${src.dir}/package.html"
             packagenames="dk.dbc.opensearch.*"
             source="1.6" sourcepath="${src.dir}">
      <link offline="false" href="http://download.oracle.com/javase/6/docs/api/"/>
    </javadoc>
  </target>
  

  <!-- Distribution targets -->
  <target name="_dist_datadock">
    <opensearch_dist dist.name="DATADOCK" Main-Class="dk.dbc.opensearch.components.datadock.DatadockMain"/>
  </target>

  <target name="_dist_pti">
    <opensearch_dist dist.name="PTI" Main-Class="dk.dbc.opensearch.components.pti.PTIMain"/>
  </target>

  <target name="_dist_adminfunc">
    <opensearch_dist dist.name="ADMIN_FUNC" Main-Class="dk.dbc.opensearch.common.fedora.AdministrationFunc"/>
  </target>

  <target name="_dist_fedora">
    <opensearch_dist dist.name="FEDORA" Main-Class="dk.dbc.opensearch.common.fedora.FedoraMain"/>
  </target>

  <target name="_dist_rhino">
    <opensearch_dist dist.name="RHINO" Main-Class="dk.dbc.opensearch.plugins.RunScript"/>
  </target>

  <target name="_dist_testindexer">
    <opensearch_dist dist.name="TESTINDEXER" Main-Class="dk.dbc.opensearch.tools.testindexer.IndexerMain"/>
  </target>

  <target name="_dist_readindex">
    <opensearch_dist dist.name="READINDEXER" Main-Class="dk.dbc.opensearch.tools.readindex.ReadIndexMain"/>
  </target>

  <target name="_dist_itqlquery">
    <opensearch_dist dist.name="ITQL" Main-Class="dk.dbc.opensearch.tools.relations.Main"/>
  </target>

  <target name="_dist_indexchecker">
    <opensearch_dist dist.name="INDEXCHECKER" Main-Class="dk.dbc.opensearch.tools.indexchecker.IndexCheckerMain"/>
  </target>
 
  <target name="_dist_emptyfedora">
    <opensearch_dist dist.name="EMPTYFEDORA" Main-Class="dk.dbc.opensearch.common.fedora.EmptyFedora"/>
  </target>
 
    
  <!-- ============================ -->
  <!-- Cobertura code coverage tool -->

  <!-- Setting up the path -->
  <property name="cobertura.dir" value="${lib.dir}"/>

  <path id="cobertura.classpath">
    <fileset dir="${cobertura.dir}">
      <include name="cobertura.jar" />
      <include name="*.jar" />
      <exclude name="ant.jar" />
    </fileset>
  </path>
  
  <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

  <!--   The instrument target - building instrumented code -->
  <target name="_coverage-instrument">

    <!-- Remove the coverage data file and any old instrumentation. -->
    <delete dir="${instrumented.dir}" />

    <cobertura-instrument todir="${instrumented.dir}" datafile="${instrumented.dir}/cobertura.ser">
      <!--
          The following line causes instrument to ignore any
          source line containing a reference to log4j, for the
          purposes of coverage reporting.
      -->
      <ignore regex="org.apache.log4j.*" />

      <fileset dir="${classes.dir}">
        <!--
            Instrument all the application classes, but
            don't instrument the test classes.
        -->
        <include name="**/*.class" />
        <exclude name="**/*Test*.class" />
        <exclude name="**/*Main*.class"/>
        <exclude name="**/*Func*.class"/>
        <exclude name="**/ReadIndex.class" />
        <exclude name="**/ItqlTool.class" />
        <exclude name="**/Scan.class" />
      </fileset>
    </cobertura-instrument>
  </target>


  <target name="_coverage-test">
    <mkdir dir="${report.dir}" />

    <junit fork="yes"
           forkmode="once"
           printsummary="off"
           haltonerror="false"
           haltonfailure="false"
           dir="${instrumented.dir}">

      <jvmarg value="-javaagent:${lib.dir}/jmockit-0.996.jar" />

      <!-- Setting up the classpath -->
      <classpath location="${instrumented.dir}" />
      <classpath location="${classes.dir}" />
      <classpath location="${config.dir}" />
      <classpath refid="cobertura.classpath" />

      <formatter type="xml" usefile="yes"/>

      <!-- Performing the test -->
      <batchtest fork="yes" todir="${testresults.dir}">
        <fileset dir="${unittests.dir}" includes="**/*Test.java"/>
      </batchtest>
    </junit>
  </target>


  <target name="_coverage-report-html" depends="_coverage-test">
    <cobertura-report destdir="${testresults.dir}/cobertura/html" 
                      datafile="${instrumented.dir}/cobertura.ser">
      <fileset dir="${src.dir}">
        <include name="**/*.java"/>
      </fileset>
    </cobertura-report>
  </target>


  <target name="_coverage-report-xml" depends="_coverage-test">
    <cobertura-report format="xml" 
                      destdir="${testresults.dir}/cobertura/xml" 
                      datafile="${instrumented.dir}/cobertura.ser">
      <fileset dir="${src.dir}">
        <include name="**/*.java" />
      </fileset>
      <fileset dir="${unittests.dir}">
        <include name="**/*.java" />
      </fileset>
    </cobertura-report>
  </target>

</project>
