<?xml version="1.0" encoding="UTF-8" ?>
<project name="targets" >

  <import file="build-common.xml" />

  <dirname property="targets.basedir" file="${ant.file.targets}"/>

  <target name="help">
	<echo>
  	  Usage: There are two ways to use this ant build script:		     
             1) ant target
                Examples: ant compile
                          ant test
                          ...
  	     
             2) ant project -Darg="target"
                Examples: ant config -Darg="compile"
                          ant datadock -Darg="test"
                          ...
              
             3) ant test-single -Dtest="project"
                Examples: ant test-single -Dtest="dk.dbc.opensearch.common.os.tests.FileFilterTest"
                          ant test-single -Dtest="dk.dbc.opensearch.components.datadock.tests.DatadockManagerTest"                          
                          ...

	  where 'target' options are the "usual", e.g., compile, test, etc.,
	  and 'projects' can be obtained by issuing command 'tree -d src/dk/dbc/opensearch/'
  	</echo>
  </target>
	
  <!-- ANT TASKS -->
  <property name="clean" value="true" />
	
  <target name="clean">
    <if>
      <equals arg1="${clean}" arg2="true"/>
      <then>
        <antcall target="_clean" />
      </then>
    </if>
    <var name="clean" unset="true"/>
    <property name="clean" value="false"/>
  </target>
  	 
   
  <target name="compile" depends="clean, xsd">
    <antcall target="_compile" />
  </target>

  <target name="compile_project" depends="clean">
    <antcall target="_compile" />
  </target>

	
  <target name="compile-tests" depends="compile">
    <antcall target="_compile-tests" />
  </target>

   <target name="compile-tests_project" depends="compile_project">
    <antcall target="_compile-tests" />
  </target>


  <target name="test" depends="compile-tests">
    <antcall target="_test"/>
  </target>

  
  <target name="test_project" depends="compile-tests_project">
    <antcall target="_test" />
  </target>


  <target name="test-single" depends="test_Dtest, compile-tests">
    <antcall target="_test-single" />
  </target>


  <target name="config_py">
    <antcall target="py_config" />
  </target>


  <target name="dist" depends="clean, xsd, config_py">
    <antcall target="compile_project">
      <param name="project.name" value="dist/*.jar" />
    </antcall>
    <antcall target="_dist_datadock">
      <param name="src.dir" value="${src.dir}" />
      <param name="project.name" value="dist/${dist.jar}_DATADOCK.jar" />
    </antcall>
    <antcall target="_dist_pti">
      <param name="src.dir" value="${src.dir}" />
      <param name="project.name" value="dist/${dist.jar}_DATADOCK.jar" />
    </antcall>
  </target> 


  <target name="dist_datadock" depends="clean, xsd, compile">
    <antcall target="_dist_datadock">
      <param name="src.dir" value="${src.dir}" />
      <param name="project.name" value="dist/${dist.jar}_DATADOCK.jar" />
    </antcall>
  </target>


  <target name="dist_pti" depends="clean, xsd, compile">
    <antcall target="_dist_pti">
      <param name="src.dir" value="${src.dir}" />
      <param name="project.name" value="dist/${dist.jar}_PTI.jar" />
    </antcall>
  </target>


  <target name="doc">
    <antcall target="_doc" />
  </target>


  <target name="coverage-instrument" depends="compile-tests">
    <antcall target="_coverage-instrument" />
  </target>


  <target name="coverage-test" depends="coverage-instrument, test">
    <antcall target="_coverage-test" />
  </target>


  <target name="coverage-report-xml" depends="coverage-test">
    <antcall target="_coverage-report-xml" />
  </target>


  <!-- Auxilliary target -->
  <target name="test_Darg" unless="arg">
    <echo>
      '-Darg="..." should be set to, e.g., compile, test, etc.
    </echo>
    <antcall target="help" />
    <fail message="'-Darg' should be set; see above!"/>
  </target>
  

  <target name="test_Dtest" unless="test">
    <echo>
      '-Dtest="..." should be set to some [project].tests.MyClassTest.
    </echo>
    <antcall target="help" />
    <fail message="'-Dtest' should be set; see above!"/>
  </target>
  

  <!-- ANT TARGETS -->  
  <target name="config" depends="test_Darg, clean">
    <!--antcall target="test_Darg" /-->
    <antcall target="${arg}_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/common/config" />
      <param name="project.name" value="config" />
    </antcall>
  </target>


  <target name="db" depends="test_Darg, clean, types">
    <!--antcall target="test_Darg" /-->
    <antcall target="${arg}_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/common/db" />
      <param name="project.name" value="db" />
    </antcall>
  </target>


  <target name="fedora" depends="test_Darg, clean, xsd, types, helpers">
    <antcall target="${arg}_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/common/fedora" />
      <param name="project.name" value="fedora" />
    </antcall>
  </target>


  <target name="helpers" depends="test_Darg, types, os">
    <antcall target="${arg}_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/common/helpers" />
      <param name="project.name" value="helpers" />
    </antcall>
  </target>


  <target name="os" depends="test_Darg">
    <antcall target="${arg}_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/common/os" />
      <param name="project.name" value="os" /> 
    </antcall>
  </target>


  <target name="pluginframework" depends="test_Darg, types, os">
    <antcall target="${arg}_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/common/pluginframework" />
      <param name="project.name" value="pluginframework" />
    </antcall>
  </target>


  <target name="statistics" depends="test_Darg, db">
    <antcall target="${arg}_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/common/statistics" />
      <param name="project.name" value="statistics" />
    </antcall>
  </target>


  <target name="types" depends="test_Darg, clean, config">
    <antcall target="${arg}_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/common/types" />
      <param name="project.name" value="types" />
    </antcall>
  </target>


  <target name="datadock" depends="test_Darg, fedora, os">
    <antcall target="${arg}_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/components/datadock" />
      <param name="project.name" value="datadock" />
    </antcall>
  </target>


  <target name="harvest" depends="test_Darg, helpers">
    <antcall target="${arg}_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/components/harvest" />
      <param name="project.name" value="harvest" />
    </antcall>
  </target>


  <!--target name="lantern">
    <antcall target="${arg}">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/components/lantern" />
      <param name="project.name" value="lantern" />
    </antcall>
  </target-->


  <target name="pti" depends="test_Darg, fedora">
    <antcall target="${arg}_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/components/" />
      <param name="project.name" value="pti" />
    </antcall>
  </target>


  <target name="plugins" depends="test_Darg, pluginframework, helpers, statistics">
    <antcall target="${arg}_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/plugins" />
      <param name="project.name" value="plugins" />
    </antcall> 
  </target>


  <!--
      XSD TARGET
  -->

  <target name="xsd">
    <antcall target="_xsd-classes" />
    <antcall target="_compile">
      <param name="project.name" value="xsd" />
      <param name="src.dir" value="${xsd_gen.dir}/" />
    </antcall>
  </target>


  <!--
      EXPERIMENTAL TARGETS
  -->
  
  <target name="chokoladekage">
    <input message="Er det fredag?"
           validargs="j,n"
           addproperty="is.friday" />
    <condition property="do.answer">
      <equals arg1="j" arg2="${is.friday}" />      
    </condition>
    <if>
      <equals arg1="${do.answer}" arg2="true" />
      <then>
        <echo>Så gå i kantinen og se om der skulle chokoladekage i dag!</echo>
      </then>
      <else>
        <echo>Så vent til det bliver fredag, eller gå på tanken!</echo>
      </else>
    </if>
  </target>
    

</project>