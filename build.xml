<?xml version="1.0" encoding="UTF-8" ?>

<!--
  This file is part of opensearch.
  Copyright Â© 2009, Dansk Bibliotekscenter a/s,
  Tempovej 7-11, DK-2750 Ballerup, Denmark. CVR: 15149043

  opensearch is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  opensearch is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with opensearch.  If not, see <http://www.gnu.org/licenses/>.
-->


<project name="OpenSearch" default="compile" >
  <property name="version" value="0.9"/>
  
  <import file="build-common.xml" />

  <dirname property="targets.basedir" file="${ant.file.targets}"/>

  <target name="help">
	<echo>
  	  Usage: There are threewo ways to use this ant build script:		     
             1) ant target
                Examples: ant compile
                          ant test
                          ...
  	     
             2) ant project -Darg="target" 
                Examples: ant config -Darg="compile"
                          ant datadock -Darg="test"
                          ...
              
             3) ant test-single -Dtest="project"
                Examples: ant test-single -Dtest="dk.dbc.opensearch.common.os.FileFilterTest"
                          ant test-single -Dtest="dk.dbc.opensearch.components.datadock.DatadockManagerTest"
                          ...
             
             4) ant functionaltests -Darg="classname"
                Examples: ant functionaltests -Darg="dk.dbc.opensearch.common.fedora.AdministrationFunc"
                          DOES NOT WORK!: ant functionaltests -Darg="dk.dbc.opensearch.tools.indexchecker.IndexCheckerMain"

             5) ant functionaltests -Darg="classname" Dmainargs="args"
                Examples: ant functionaltests -Darg="dk.dbc.opensearch.common.fedora.FedoraAuxiliaryMain" -Dmainarg="deletepids"
                args:     - "deletepids"
                          <!-- - "getnextpid work" (work is relation prefix: "work", "dbc", "775100", "710100") -->
                

	  where 'target' options are the "usual", e.g., compile, test, etc.,
	  and 'projects' can be obtained by issuing command 'tree -d src/dk/dbc/opensearch/'
  	</echo>
  </target>
	
  <!-- ANT TASKS -->
  <property name="clean" value="true" />
	
  <target name="clean">
    <if>
      <equals arg1="${clean}" arg2="true"/>
      <then>
        <antcall target="_clean" />
      </then>
    </if>
    <var name="clean" unset="true"/>
    <property name="clean" value="false"/>
  </target>
  	 
   
  <!--target name="compile" depends="clean">
  	<if>
  	  <equals arg1="${project.name}" arg2="${project.name}" />
  	  <then>
  	  	<echo>then</echo>
  	    <antcall target="_compile">
  	      <param name="project.name" value="opensearch" />
  	    </antcall>
  	  </then>
  	  <else>
  	  	<echo>else</echo>
  	  	<antcall target="_compile" />
  	  </else>
  	</if>
  </target-->
	
  <target name="compile"> 
    <antcall target="_compile" />
  </target>


  <target name="compile-with-warnings" >
    <antcall target="_compile-with-warnings" />
  </target>


  <target name="compile_project" >
    <antcall target="_compile" />
  </target>

	
  <target name="compile-tests" depends="compile">
    <antcall target="_compile-tests" />
  </target>

   <target name="compile-tests_project"> <!-- depends="compile_project"-->
    <antcall target="_compile-tests_project" />
  </target>


  <target name="test" depends="clean, compile-tests">
    <antcall target="_test"/>
  </target>

  
  <target name="test_project" depends="compile-tests_project">
    <antcall target="_test" />
  </target>


  <target name="test-single" depends="test_Dtest, compile-tests">
    <antcall target="_test-single" />
  </target>


  <target name="config_py">
    <antcall target="py_config" />
  </target>


  <target name="dist" depends="clean, config_py">
    <antcall target="compile_project">
      <param name="project.name" value="dist/*.jar" />
    </antcall>
    <antcall target="_dist_datadock">
      <!--param name="src.dir" value="${src.dir}" /-->
      <param name="project.name" value="dist/${dist.jar}_DATADOCK.jar" />
    </antcall>
    <antcall target="_dist_pti">
      <!--param name="src.dir" value="${src.dir}" /-->
      <param name="project.name" value="dist/${dist.jar}_DATADOCK.jar" />
    </antcall>

    <!-- TO BE DELETED UPON RELEASE!!! -->
    <antcall target="compile-tests" />
    <antcall target="_dist_adminfunc">
      <!--param name="src.dir" value="${src.dir}" /-->
      <param name="project.name" value="dist/${dist.jar}_ADMIN_FUNC.jar" />
    </antcall>    
  </target> 


  <target name="dist-aux" depends="config_py">
    <antcall target="compile-tests" />
    <antcall target="_dist_testindexer">
      <param name="src.dir" value="${src.dir}" />
      <param name="project.name" value="dist/${dist.jar}_TESTINDEXER.jar" />
    </antcall>
    <antcall target="_dist_readindex">
      <param name="src.dir" value="${src.dir}" />
      <param name="project.name" value="dist/${dist.jar}_READINDEX.jar" />
    </antcall>
    <antcall target="_dist_indexchecker">
      <param name="src.dir" value="${src.dir}" />
      <param name="project.name" value="dist/${dist.jar}_INDEXCHECKER.jar" />
    </antcall>
    <antcall target="_dist_itqlquery">
      <param name="src.dir" value="${src.dir}" />
      <param name="project.name" value="dist/${dist.jar}_ITQL.jar" />
    </antcall>
  </target> 


  <target name="dist_datadock" depends="compile">
    <antcall target="_dist_datadock"/>
  </target>


  <target name="dist_pti" depends="compile">
    <antcall target="_dist_pti"/>
  </target>


  <target name="dist_adminfunc" depends="compile-tests, config_py">
    <antcall target="_dist_adminfunc"/>
  </target>


  <target name="dist_testindexer" depends="compile">
    <antcall target="_dist_testindexer"/>
  </target>


  <target name="dist_readindex" depends="compile">
    <antcall target="_dist_readindex"/>
  </target>


  <target name="dist_indexchecker" depends="compile-tests">
    <antcall target="_dist_indexchecker"/>
  </target>


  <target name="dist_itqlquery" depends="compile-tests">
    <antcall target="_dist_itqlquery"/>
  </target>


  <target name="doc">
    <antcall target="_doc" />
  </target>


  <target name="coverage-instrument" depends="compile-tests">
    <antcall target="_coverage-instrument" />
  </target>


  <target name="coverage-test" depends="coverage-instrument, test">
    <antcall target="_coverage-test" />
  </target>


  <target name="coverage-report-html" depends="coverage-test">
    <antcall target="_coverage-report-html" />
  </target>


  <target name="coverage-report-xml" depends="coverage-test">
    <antcall target="_coverage-report-xml" />
  </target>


  <!-- Auxilliary target -->
  <target name="test_Darg" unless="arg">
    <echo>
      '-Darg="..." should be set to, e.g., compile, test, etc.
    </echo>
    <antcall target="help" />
    <fail message="'-Darg' should be set; see above!"/>
  </target>
  

  <target name="test_Dtest" unless="test">
    <echo>
      '-Dtest="..." should be set to some [project].tests.MyClassTest.
    </echo>
    <antcall target="help" />
    <fail message="'-Dtest' should be set; see above!"/>
  </target>
  

  <!-- ANT TARGETS -->  
  <target name="config" depends="test_Darg">
    <antcall target="compile_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/common/config" />
      <param name="project.name" value="config" />
    </antcall>
    <if>
      <equals arg1="${arg}" arg2="test"/>
      <then>
        <antcall target="${arg}_project">
          <param name="src.dir" value="${targets.basedir}/tests/unittests/dk/dbc/opensearch/common/config" />
          <param name="project.name" value="config" />
        </antcall>
      </then>
    </if>
  </target>


  <target name="db" depends="test_Darg, types">
    <antcall target="compile_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/common/db" />
      <param name="project.name" value="db" />
    </antcall>
    <if>
      <equals arg1="${arg}" arg2="test"/>
      <then>
        <antcall target="${arg}_project">
          <param name="src.dir" value="${targets.basedir}/tests/unittests/dk/dbc/opensearch/common/db" />
          <param name="project.name" value="db" />
        </antcall>
      </then>
    </if>
  </target>


  <target name="fedora" depends="test_Darg, db, statistics, helpers">
    <antcall target="compile_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/common/fedora" />
      <param name="project.name" value="fedora" />
    </antcall>
    <if>
      <equals arg1="${arg}" arg2="test"/>
      <then>
        <antcall target="${arg}_project">
          <param name="src.dir" value="${targets.basedir}/tests/unittests/dk/dbc/opensearch/common/fedora" />
          <param name="project.name" value="fedora" />
        </antcall>
      </then>
    </if>
  </target>


  <target name="helpers" depends="test_Darg, types, os">
    <antcall target="compile_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/common/helpers" />
      <param name="project.name" value="helpers" />
    </antcall>
    <if>
      <equals arg1="${arg}" arg2="test"/>
      <then>
        <antcall target="${arg}_project">
          <param name="src.dir" value="${targets.basedir}/tests/unittests/dk/dbc/opensearch/common/helpers" />
          <param name="project.name" value="helpers" />
        </antcall>
      </then>
    </if>
  </target>


  <target name="os" depends="test_Darg">
    <antcall target="compile_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/common/os" />
      <param name="project.name" value="os" />
    </antcall>
    <if>
      <equals arg1="${arg}" arg2="test"/>
      <then>
        <antcall target="${arg}_project">
          <param name="src.dir" value="${targets.basedir}/tests/unittests/dk/dbc/opensearch/common/os" />
          <param name="project.name" value="os" />
        </antcall>
      </then>
    </if>
  </target>


  <target name="pluginframework" depends="test_Darg, types, os, helpers, statistics">
    <antcall target="compile_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/common/pluginframework" />
      <param name="project.name" value="pluginframework" />
    </antcall>
    <if>
      <equals arg1="${arg}" arg2="test"/>
      <then>
        <antcall target="${arg}_project">
          <param name="src.dir" value="${targets.basedir}/tests/unittests/dk/dbc/opensearch/common/pluginframework" />
          <param name="project.name" value="pluginframework" />
        </antcall>
      </then>
    </if>
  </target>


  <target name="statistics" depends="test_Darg, db">
    <antcall target="compile_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/common/statistics" />
      <param name="project.name" value="statistics" />
    </antcall>
    <if>
      <equals arg1="${arg}" arg2="test"/>
      <then>
        <antcall target="${arg}_project">
          <param name="src.dir" value="${targets.basedir}/tests/unittests/dk/dbc/opensearch/common/statistics" />
          <param name="project.name" value="statistics" />
         </antcall>
       </then>
     </if>
  </target>


  <target name="types" depends="test_Darg, config">
    <antcall target="compile_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/common/types" />
      <param name="project.name" value="types" />
    </antcall>
    <if>
      <equals arg1="${arg}" arg2="test"/>
      <then>
        <antcall target="${arg}_project">
          <param name="src.dir" value="${targets.basedir}/tests/unittests/dk/dbc/opensearch/common/types" />
          <param name="project.name" value="types" />
         </antcall>
       </then>
     </if>
  </target>


  <target name="datadock" depends="test_Darg, fedora, os, pluginframework, harvest, plugins">
    <antcall target="compile_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/components/datadock" />
      <param name="project.name" value="datadock" />
    </antcall>
    <if>
      <equals arg1="${arg}" arg2="test"/>
      <then>
        <antcall target="${arg}_project">
          <param name="src.dir" value="${targets.basedir}/tests/unittests/dk/dbc/opensearch/components/datadock" />
          <param name="project.name" value="datadock" />
         </antcall>
       </then>
     </if>
  </target>


  <target name="harvest" depends="test_Darg, helpers">
    <antcall target="compile_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/components/harvest" />
      <param name="project.name" value="harvest" />
    </antcall>
    <if>
      <equals arg1="${arg}" arg2="test"/>
      <then>
        <antcall target="${arg}_project">
          <param name="src.dir" value="${targets.basedir}/tests/unittests/dk/dbc/opensearch/components/harvest" />
          <param name="project.name" value="harvest" />
         </antcall>
       </then>
     </if>
  </target>


  <target name="pti" depends="test_Darg, fedora, pluginframework, compass">
    <antcall target="compile_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/components/pti" />
      <param name="project.name" value="pti" />
    </antcall>
    <if>
      <equals arg1="${arg}" arg2="test"/>
      <then>
        <antcall target="${arg}_project">
          <param name="src.dir" value="${targets.basedir}/tests/unittests/dk/dbc/opensearch/components/pti" />
          <param name="project.name" value="pti" />
         </antcall>
       </then>
     </if>
  </target>


  <target name="compass" depends="test_Darg, config, os, helpers">
    <antcall target="compile_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/common/compass" />
      <param name="project.name" value="compass" />
    </antcall>
    <if>
      <equals arg1="${arg}" arg2="test"/>
      <then>
        <antcall target="${arg}_project">
          <param name="src.dir" value="${targets.basedir}/tests/unittests/dk/dbc/opensearch/common/compass" />
          <param name="project.name" value="compass" />
         </antcall>
       </then>
     </if>
  </target>


  <target name="plugins" depends="test_Darg, pluginframework, helpers, statistics, compass">
    <antcall target="compile_project">
      <param name="src.dir" value="${targets.basedir}/src/dk/dbc/opensearch/plugins" />
      <param name="project.name" value="plugins" />
    </antcall>
    <if>
      <equals arg1="${arg}" arg2="test"/>
      <then>
        <antcall target="${arg}_project">
          <param name="src.dir" value="${targets.basedir}/tests/unittests/dk/dbc/opensearch/plugins" />
          <param name="project.name" value="plugins" />
         </antcall>
       </then>
     </if>
  </target>


  <!--
      EXPERIMENTAL TARGETS
  -->

  <target name="functionaltests">
    <antcall target="compile-tests">
      <param name="project.name" value="${arg}" />
    </antcall>
    <antcall target="_test_functionaltests">
      <param name="classname" value="${arg}" />
      <param name="mainarg" value="${mainarg}" />
      <param name="project.name" value="test" />
    </antcall>
  </target>
  
  <target name="chokoladekage">
    <input message="Er det fredag?"
           validargs="j,n"
           addproperty="is.friday" />
    <condition property="do.answer">
      <equals arg1="j" arg2="${is.friday}" />      
    </condition>
    <if>
      <equals arg1="${do.answer}" arg2="true" />
      <then>
        <echo>SÃ¥ gÃ¥ i kantinen og se om der skulle chokoladekage i dag!</echo>
      </then>
      <else>
        <echo>SÃ¥ vent til det bliver fredag, eller gÃ¥ pÃ¥ tanken!</echo>
      </else>
    </if>
  </target>
</project>

