#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -*- mode: python -*-

import sys

try:
    import xml.etree.ElementTree as ET
except ImportError:
    try:
        import elementtree.ElementTree as ET
    except ImportError:
        sys.exit( "could not import elementtree library. Is it installed?" )

import os
from time import strftime, gmtime


def check_trunk( args ):
    path = str()
    if len( args ) != 2:#"tools" in os.listdir( path ):
        sys.exit( "please specify location of the trunk as argument to the program") #run this program from the root of the trunk" )
    else:
        path = args[1]
        path = os.path.abspath( path )
        
    #should check that path stat's
    return path


def build_config( path ):
    # this will probably not work for cruisecontrol user
    usern = os.environ.get( 'USER' )

    #pluginpath = os.path.join( path, "build/classes/dk/dbc/opensearch/plugins" )
    pluginpath = os.path.join( path, "plugins" )

    root   = ET.Element( "opensearch-definition" )

    now = strftime("%d/%m/%y %H:%M:%S", gmtime() )
    comment = ET.Comment( "This file was autogenerated by tools/build_config.py on %s. All edits to this file will be overwritten on next build"%( now ) )
    root.append( comment )

    compass= ET.SubElement( root, "compass" )
    db     = ET.SubElement( root, "database" )
    dd     = ET.SubElement( root, "datadock" )
    fedora = ET.SubElement( root, "fedora" )
    filest = ET.SubElement( root, "filesystem" )
    harvest= ET.SubElement( root, "harvester" )
    pidmng = ET.SubElement( root, "pidmanager" )
    pti    = ET.SubElement( root, "pti" )

    # compass settings
    configpath = ET.SubElement( compass, "configpath" )
    xsempath   = ET.SubElement( compass, "xsempath" )

    configpath.text = path + "/config/compass.cfg.xml"
    xsempath.text   = path + "/config/xml.cpm.xml"

    # database settings
    driver = ET.SubElement( db, "driver" )
    url    = ET.SubElement( db, "url" )
    user   = ET.SubElement( db, "userID" )
    passwd = ET.SubElement( db, "passwd" )
    driver.text = "org.postgresql.Driver"
    url.text    = "jdbc:postgresql:" + usern
    user.text   = usern
    passwd.text = usern

    # datadock settings
    poll      = ET.SubElement( dd, "main-poll-time" )
    reject    = ET.SubElement( dd, "rejected-sleep-time" )
    shutdown  = ET.SubElement( dd, "shutdown-poll-time" )
    queuesz   = ET.SubElement( dd, "queuesize" )
    corepool  = ET.SubElement( dd, "corepoolsize" )
    maxpool   = ET.SubElement( dd, "maxpoolsize" )
    keepalive = ET.SubElement( dd, "keepalivetime" )
    datadock  = ET.SubElement( dd, "path" )

    poll.text      = "1000" 
    reject.text    = "3000"
    shutdown.text  = "1000"
    queuesz.text   = "20"
    corepool.text  = "3"
    maxpool.text   = "6"
    keepalive.text = "10"
    datadock.text  = os.path.join( path, "config/datadock_jobs.xml" )

    #fedora settings
    host   = ET.SubElement( fedora, "host" )
    port   = ET.SubElement( fedora, "port" )
    user   = ET.SubElement( fedora, "user" )
    passwd = ET.SubElement( fedora, "passphrase" )
    host.text   = "localhost"
    port.text   = "8080"
    user.text   = "fedoraAdmin"
    passwd.text = "fedoraAdmin"

    #filesystem settings
    trunk   = ET.SubElement( filest, "trunk" )
    plugins = ET.SubElement( filest, "plugins" )
    xsd     = ET.SubElement( filest, "jobsxsd" )
    trunk.text   = path
    plugins.text = pluginpath
    xsd.text     = os.path.join( path, "config/jobs.xsd" )

    #harvester settings 
    #\todo: if toharvestfolder and accompanying text is renamed or
    # moved, remember to reflect these changes in the setup script
    toharvestfolder = ET.SubElement( harvest, "toharvest" )
    harvestdonefolder = ET.SubElement( harvest, "harvestdone" )
    maxtoharvest = ET.SubElement( harvest, "maxtoharvest" )
    toharvestfolder.text = os.path.join( path, "Harvest" )
    harvestdonefolder.text = os.path.join( path, "HarvestDone" )
    maxtoharvest.text = "1000"

    #pidmanager settings
    num_of_pids = ET.SubElement( pidmng, "num-of-pids-to-retrieve" )
    num_of_pids.text = "10"

    #pti settings
    poll      = ET.SubElement( pti, "main-poll-time" )
    reject    = ET.SubElement( pti, "rejected-sleep-time" )
    shutdown  = ET.SubElement( pti, "shutdown-poll-time" )
    resultsz  = ET.SubElement( pti, "queue-resultset-maxsize" )
    queuesz   = ET.SubElement( pti, "queuesize" )
    corepool  = ET.SubElement( pti, "corepoolsize" )
    maxpool   = ET.SubElement( pti, "maxpoolsize" )
    keepalive = ET.SubElement( pti, "keepalivetime" )
    pti_el    = ET.SubElement( pti, "path" )

    poll.text      = "1000" 
    reject.text    = "3000"
    shutdown.text  = "1000"
    resultsz.text  = "20"
    queuesz.text   = "20"
    corepool.text  = "3"
    maxpool.text   = "6"
    keepalive.text = "10"
    pti_el.text   = os.path.join( path, "config/pti_jobs.xml" )

    return root


def write_config( path, root ):
    f = open( os.path.join( path, "config", "config.xml" ), "w" )
    f.write( ET.tostring( root, "UTF-8" ) )


def main( path_to_trunk ):
    path = check_trunk( path_to_trunk )
    root = build_config( path )
    write_config( path, root )


if __name__ == '__main__':
    main( sys.argv )
