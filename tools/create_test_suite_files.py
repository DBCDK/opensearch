#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -*- mode: python -*-


import sys
import os
import fnmatch


def write_text_to_file( fldr, className, fileTxt ):
    fileName = fldr + '/' + className + '.java'

    try:
        f = open( fileName, 'w')
        f.writelines( fileTxt )
        f.close()
    except IOError, ioe:
        sys.exit( "Could not open write for writing: %s"% ( ioe ) )


def create_test_suite_file_text( fldr, className, testNames ):
    fileTxt = []
    
    # Create package name
    packageName = fldr[ fldr.index( 'dk' ):].replace( '/', '.' )
    
    #  test classes
    test_classes = ""
    l = len( testNames ) - 1
    for tests in testNames[:l]:
        test_classes += """%s.class,
        """% tests
        
    test_classes += """%s.class"""% testNames[l]

    # Header text
    fileTxt.append( """/******************************************
 * THIS FILE HAS BEEN AUTOGENERATED USING *
 *                                        *
 *       create_test_suite_files.py       *
 ******************************************/

package %s;

import org.junit.runner.RunWith;
import org.junit.runners.Suite;


@RunWith(Suite.class)
@Suite.SuiteClasses(
    {
        %s
    }
)"""% ( packageName, test_classes ) )

    # Write class
    fileTxt.append( """
public class %s 
{
    // Leave class empty!
}"""% ( className ) )

    return fileTxt


def match( ptr, fldr, names ):
    tests = []
    fileTxt = ""

    # Consider only /tests folders
    if fnmatch.fnmatch( fldr, '*tests' ):
        for name in names:
            if name.endswith( ptr ): 
                # Names for suite classes
                tests.append( name.replace( '.java', '' ) )

        # Create suite classes if '*Test.java' (ptr) files exist
        if len( tests ) > 0:
            # Process 'tests' folders
            projectName = ""
            if fldr.endswith('/tests'):
                projectName = fldr.replace( '/tests', '' ).split('/').pop()
                className = projectName.upper() + 'TestSuite'
                fileTxt = create_test_suite_file_text( fldr, className, tests )
                write_text_to_file( fldr, className, fileTxt )
    
    
def delete_suite_files( ptr, folder, names ):
    if fnmatch.fnmatch( folder, '*tests' ):
        for name in names:
            if name.endswith( ptr ):
                fileName = folder + '/' + name
                os.remove( fileName )
    

def call_walk( srcDir ):
    os.path.walk( srcDir, delete_suite_files, 'Suite.java' )
    print 'Old suite files have been deleted'
    os.path.walk( srcDir, match, 'Test.java' )
    print 'Suite files successfully created!'

sourceDir = os.getcwd()

if os.path.basename( sourceDir ) == 'tools':
    sourceDir = '../src/dk/dbc/opensearch'  
    #print sourceDir
    call_walk( sourceDir )
elif os.path.basename( sourceDir ) == 'trunk':
    sourceDir = 'src/dk/dbc/opensearch'
    #print sourceDir
    call_walk( sourceDir )
else:
    print '<ERROR>'
    print 'Current directory should be ~/.../opensearch/trunk/tools'



